<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation</title>
    <link>https://docs.rappopo.com/</link>
    <description>Recent content on Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Dec 2017 14:21:45 +0700</lastBuildDate>
    
	<atom:link href="https://docs.rappopo.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>beforeValidate</title>
      <link>https://docs.rappopo.com/bdez/model/hook/before-validate/</link>
      <pubDate>Mon, 08 Jan 2018 09:56:21 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/before-validate/</guid>
      <description> beforeValidate (body, params)
 </description>
    </item>
    
    <item>
      <title>init</title>
      <link>https://docs.rappopo.com/bdez/model/method/init/</link>
      <pubDate>Mon, 08 Jan 2018 09:51:51 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/init/</guid>
      <description> init (options)
 </description>
    </item>
    
    <item>
      <title>addDab</title>
      <link>https://docs.rappopo.com/bdez/method/add-dab/</link>
      <pubDate>Mon, 08 Jan 2018 09:49:36 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/method/add-dab/</guid>
      <description> addDab (id, dab)
 </description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>https://docs.rappopo.com/nesu/setup/</link>
      <pubDate>Mon, 18 Dec 2017 14:16:12 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/nesu/setup/</guid>
      <description>Setup as Command Line Tool Run this to install Nesu as a global package:
$ npm install -g @rappopo/nesu  Go to your project folder, and invoke:
$ nesu  The first time Nesu starts, it&amp;rsquo;ll create an empty config.json configuration file, transformer and last_seq folder in your project folder. Quit Nesu by pressing Ctrl-c and start customizing its configurations (please see details below).
Setup as a Library Go to your node.</description>
    </item>
    
    <item>
      <title>find</title>
      <link>https://docs.rappopo.com/dab/method/find/</link>
      <pubDate>Mon, 18 Dec 2017 13:37:03 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/find/</guid>
      <description>find (params)
 Query specific document from selected database using MongoDB-like query language.
Arguments Params (required) As parameter, pass the following object:
 collection: Required, the name of collection you want to work with. query: query in MongoDB-style query syntax. Optional, defaults to: {} (match all). sort: sort order, as an array of object. Optional. Example:
[{ name: &#39;asc&#39;, age: &#39;desc&#39; }]  limit: max. number of documents in one page.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://docs.rappopo.com/dab/about/</link>
      <pubDate>Mon, 18 Dec 2017 10:14:47 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/about/</guid>
      <description>These are for dummies only!!! If you&amp;rsquo;re considered yourself as a kungfu master, than you&amp;rsquo;d probably better to look for masterpieces like Waterline or Sequelize instead!!! But if you&amp;rsquo;re a dummy like me, then welcome to the party! Yay!! Finally a database access for fools!!! With lots of stuff and magic!!!!
 Background Rappopo DAB is a set of conventions of database abstraction layer with focus on how to access and work with data easily.</description>
    </item>
    
    <item>
      <title>afterValidate</title>
      <link>https://docs.rappopo.com/bdez/model/hook/after-validate/</link>
      <pubDate>Mon, 08 Jan 2018 09:56:27 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/after-validate/</guid>
      <description> afterValidate (body, params)
 </description>
    </item>
    
    <item>
      <title>getDab</title>
      <link>https://docs.rappopo.com/bdez/model/method/get-dab/</link>
      <pubDate>Mon, 08 Jan 2018 09:51:57 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/get-dab/</guid>
      <description> getDab ()
 </description>
    </item>
    
    <item>
      <title>getDab</title>
      <link>https://docs.rappopo.com/bdez/method/get-dab/</link>
      <pubDate>Mon, 08 Jan 2018 09:49:43 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/method/get-dab/</guid>
      <description> getDab (id)
 </description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://docs.rappopo.com/nesu/config/</link>
      <pubDate>Mon, 18 Dec 2017 14:17:51 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/nesu/config/</guid>
      <description>You need to create/edit the configuration file config.js in the same folder as your bootstrap file. Please see the example above.
Main Entries db.&amp;lt;mydb&amp;gt;.&amp;lt;prop&amp;gt;: put your database info here. &amp;lt;mydb&amp;gt; is the name of CouchDB database you want to stream to Elasticsearch. Put as many databases you want here, Nesu will stream all away.
default.&amp;lt;prop&amp;gt;: serve as default properties. Will be used if none are provided in db.&amp;lt;mydb&amp;gt;.&amp;lt;prop&amp;gt; section.</description>
    </item>
    
    <item>
      <title>findOne</title>
      <link>https://docs.rappopo.com/dab/method/find-one/</link>
      <pubDate>Mon, 18 Dec 2017 13:38:05 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/find-one/</guid>
      <description>findOne (id, params)
 Find specific document by its ID throughout a collection.
Arguments ID (required) Document ID to look for.
Params (required, mixed) A plain javascript object of:
 collection: Required, the name of collection you want to work with.  Or, you&amp;rsquo;re also allowed to pass a string. In this case, it will be interpreted as the collection name.
Response Result It should return an object like the one below:</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://docs.rappopo.com/dab/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.rappopo.com/dab/getting-started/</guid>
      <description></description>
    </item>
    
    <item>
      <title>beforeCreate</title>
      <link>https://docs.rappopo.com/bdez/model/hook/before-create/</link>
      <pubDate>Mon, 08 Jan 2018 09:54:26 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/before-create/</guid>
      <description> beforeCreate (body, params)
 </description>
    </item>
    
    <item>
      <title>getDabCollection</title>
      <link>https://docs.rappopo.com/bdez/model/method/get-dab-collection/</link>
      <pubDate>Mon, 08 Jan 2018 09:52:02 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/get-dab-collection/</guid>
      <description> getDabCollection ()
 </description>
    </item>
    
    <item>
      <title>delDab</title>
      <link>https://docs.rappopo.com/bdez/method/del-dab/</link>
      <pubDate>Mon, 08 Jan 2018 09:49:55 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/method/del-dab/</guid>
      <description> delDab (id)
 </description>
    </item>
    
    <item>
      <title>create</title>
      <link>https://docs.rappopo.com/dab/method/create/</link>
      <pubDate>Mon, 18 Dec 2017 13:38:10 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/create/</guid>
      <description>create (body, params)
 Create or add a new document into a collection.
Arguments Body (required) Document body should be a plain javascript object. If ID is not provided, it&amp;rsquo;ll be created automatically.
If collection has fields definition, than the document body will be sanitized according to its type. Columns that aren&amp;rsquo;t listed in collection fields will also discarded. This is to make sure that you&amp;rsquo;ll always get a clean and correct document saved in the database.</description>
    </item>
    
    <item>
      <title>afterCreate</title>
      <link>https://docs.rappopo.com/bdez/model/hook/after-create/</link>
      <pubDate>Mon, 08 Jan 2018 09:54:32 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/after-create/</guid>
      <description> afterCreate (body, createResult, params)
 </description>
    </item>
    
    <item>
      <title>addModel</title>
      <link>https://docs.rappopo.com/bdez/method/add-model/</link>
      <pubDate>Mon, 08 Jan 2018 09:50:02 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/method/add-model/</guid>
      <description> addModel (modelDef)
 </description>
    </item>
    
    <item>
      <title>Implementation</title>
      <link>https://docs.rappopo.com/dab/implementation/</link>
      <pubDate>Tue, 19 Dec 2017 09:22:51 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/implementation/</guid>
      <description>While each and every DAB implementation share the same methods, its init options might not. Therefore, please refer to its accompaniying document instead:
 @rappopo/dab-couch for CouchDB 2.0 and above @rappopo/dab-es for Elasticsearch @rappopo/dab-knex for KnexJS @rappopo/dab-memory a custom lodash based memory database @rappopo/dab-mongo for MongoDB @rappopo/dab-ne for NeDB @rappopo/dab-pouch for PouchDB @rappopo/dab-redis for Redis  </description>
    </item>
    
    <item>
      <title>update</title>
      <link>https://docs.rappopo.com/dab/method/update/</link>
      <pubDate>Mon, 18 Dec 2017 13:38:15 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/update/</guid>
      <description>update (id, body, params)
 Update an existing document in a collection.
Arguments ID (required) The document ID.
Body (required) The new document body to be used as replacement.
If collection has fields definition, than the document body will be sanitized according to its type. Columns that aren&amp;rsquo;t listed in collection fields will also discarded. This is to make sure that you&amp;rsquo;ll always get a clean and correct document saved in the database.</description>
    </item>
    
    <item>
      <title>beforeUpdate</title>
      <link>https://docs.rappopo.com/bdez/model/hook/before-update/</link>
      <pubDate>Mon, 08 Jan 2018 09:54:42 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/before-update/</guid>
      <description> beforeUpdate (id, body, params)
 </description>
    </item>
    
    <item>
      <title>getModel</title>
      <link>https://docs.rappopo.com/bdez/method/get-model/</link>
      <pubDate>Mon, 08 Jan 2018 09:50:11 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/method/get-model/</guid>
      <description> getModel (name)
 </description>
    </item>
    
    <item>
      <title>remove</title>
      <link>https://docs.rappopo.com/dab/method/remove/</link>
      <pubDate>Mon, 18 Dec 2017 13:38:19 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/remove/</guid>
      <description>remove (id, params)
 Remove an existing document from a collection.
Arguments ID (required) The document ID.
Params (required, mixed) A plain javascript object of:
 collection: Required, the name of collection you want to work with. withSource: If you want to get the related document before deleted, set it to true. The document will be put under source key. Optional, defaults to false  Or, you&amp;rsquo;re also allowed to pass a string.</description>
    </item>
    
    <item>
      <title>afterUpdate</title>
      <link>https://docs.rappopo.com/bdez/model/hook/after-update/</link>
      <pubDate>Mon, 08 Jan 2018 09:54:49 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/after-update/</guid>
      <description> afterUpdate (id, body, updateResult, params)
 </description>
    </item>
    
    <item>
      <title>delModel</title>
      <link>https://docs.rappopo.com/bdez/method/del-model/</link>
      <pubDate>Mon, 08 Jan 2018 09:50:23 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/method/del-model/</guid>
      <description> delModel (name)
 </description>
    </item>
    
    <item>
      <title>bulkCreate</title>
      <link>https://docs.rappopo.com/dab/method/bulk-create/</link>
      <pubDate>Mon, 18 Dec 2017 13:38:27 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/bulk-create/</guid>
      <description>bulkCreate (body, params)
 Method for creating/inserting many documents in one shot.
Arguments Body (array, required) Body is always an array of objects. If no ID is not provided, it&amp;rsquo;ll be generated automatically for you. Example:
[ { _id: &#39;james-bond&#39;, name: &#39;James Bond&#39; }, { _id: &#39;jack-bauer&#39;, name: &#39;Jack Bauer&#39; }, { name: &#39;Johnny English&#39; } // ID isn&#39;t provided here, it&#39;ll be created automatically ... ]  Params (required)  collection: Required, the name of collection you want to work with.</description>
    </item>
    
    <item>
      <title>beforeRemove</title>
      <link>https://docs.rappopo.com/bdez/model/hook/before-remove/</link>
      <pubDate>Mon, 08 Jan 2018 09:55:04 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/before-remove/</guid>
      <description> beforeRemove (id, params)
 </description>
    </item>
    
    <item>
      <title>bulkUpdate</title>
      <link>https://docs.rappopo.com/dab/method/bulk-update/</link>
      <pubDate>Mon, 18 Dec 2017 13:38:31 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/bulk-update/</guid>
      <description>bulkUpdate (body, params)
 Method for updating many documents in one shot. Due to the complexity and effectiveness, it is always a replace operation. Meaning the whole document body, except the id, will be replaced with the new one provided.
Partial updates are not supported.
Arguments Body (array, required) Body is always an array of objects. Every object needs to have an ID, otherwise, it&amp;rsquo;ll yield a Not found error.</description>
    </item>
    
    <item>
      <title>afterRemove</title>
      <link>https://docs.rappopo.com/bdez/model/hook/after-remove/</link>
      <pubDate>Mon, 08 Jan 2018 09:55:11 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/after-remove/</guid>
      <description> afterRemove (id, removeResult, params)
 </description>
    </item>
    
    <item>
      <title>bulkRemove</title>
      <link>https://docs.rappopo.com/dab/method/bulk-remove/</link>
      <pubDate>Mon, 18 Dec 2017 13:38:37 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/bulk-remove/</guid>
      <description>bulkRemove (body, params)
 Method for removing many documents in one shot.
Arguments Body (array, required) Body is always an array of strings or numbers. Those represent the ID of its corresponding documents
Example:
[ &#39;james-bond&#39;, &#39;jack-bauer-001&#39;, &#39;johnny-english&#39;, ... ]  Params (required)  collection: Required, the name of collection you want to work with. withDetail: Optional, defaults to false. If true, details of operation will be returned. It is an array of objects in the same order as body request above.</description>
    </item>
    
    <item>
      <title>beforeBulkCreate</title>
      <link>https://docs.rappopo.com/bdez/model/hook/before-bulk-create/</link>
      <pubDate>Mon, 08 Jan 2018 09:55:34 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/before-bulk-create/</guid>
      <description> beforeBulkCreate (body, params)
 </description>
    </item>
    
    <item>
      <title>copyFrom</title>
      <link>https://docs.rappopo.com/dab/method/copy-from/</link>
      <pubDate>Mon, 18 Dec 2017 13:38:42 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/copy-from/</guid>
      <description>copyFrom (source, params)
 This method gives you the full power of document imports.
Arguments Source (mixed, required) If source is a json file, than all contained documents will be inserted to the database, e.g:
... dab.copyFrom(&#39;/path/of/my/file.json&#39;, { collection: &#39;test&#39; }) .then(function (result) { ... }) ...  But if source is another DAB instance, then it will be queried and copied over as chunks. E.g:
var source = new DabKnex({ .</description>
    </item>
    
    <item>
      <title>afterBulkCreate</title>
      <link>https://docs.rappopo.com/bdez/model/hook/after-bulk-create/</link>
      <pubDate>Mon, 08 Jan 2018 09:55:39 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/after-bulk-create/</guid>
      <description> afterBulkCreate (body, bulkCreateResult, params)
 </description>
    </item>
    
    <item>
      <title>@rappopo/dab-memory</title>
      <link>https://docs.rappopo.com/dab/dab-memory/</link>
      <pubDate>Tue, 19 Dec 2017 09:33:22 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/dab-memory/</guid>
      <description>A DAB implementation for in-memory datastore, powered by Lodash and lodash-query.
Installation Simply invoke this command in your project folder:
$ npm install --save @rappopo/dab-memory  And within your script:
const DabMemory = require(&#39;@rappopo/dab-memory&#39;) const dab = new DabMemory() // prepare collections dab.createCollection({ name: &#39;test&#39; }) .then(result =&amp;gt; { return dab.bulkCreate(data, { collection: &#39;test&#39; }) }) ... // lets dab! dab.findOne(&#39;my-doc&#39;, &#39;test&#39;).then(function(doc) { ... })  Options Currently, no options necessary.</description>
    </item>
    
    <item>
      <title>copyTo</title>
      <link>https://docs.rappopo.com/dab/method/copy-to/</link>
      <pubDate>Mon, 18 Dec 2017 13:38:46 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/copy-to/</guid>
      <description>copyTo (dest, params)
 Use this method to export your datasource.
Arguments Dest (mixed, required) If destination is a json file, than all resulting documents that matched the params query will be saved to the file, e.g:
... dab.copyTo(&#39;/path/of/my/file.json&#39;, { collection: &#39;test&#39;, query: { age: { $gt: 20 } }, limit: 10 }).then(function (result) { ... }) ...  But if destination is another DAB instance, then your current instance will be queried and copied over as chunks.</description>
    </item>
    
    <item>
      <title>beforeBulkUpdate</title>
      <link>https://docs.rappopo.com/bdez/model/hook/before-bulk-update/</link>
      <pubDate>Mon, 08 Jan 2018 09:55:45 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/before-bulk-update/</guid>
      <description> beforeBulkUpdate (body, params)
 </description>
    </item>
    
    <item>
      <title>find</title>
      <link>https://docs.rappopo.com/bdez/model/method/find/</link>
      <pubDate>Mon, 08 Jan 2018 09:52:24 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/find/</guid>
      <description> find (params)
 </description>
    </item>
    
    <item>
      <title>createCollection</title>
      <link>https://docs.rappopo.com/dab/method/create-collection/</link>
      <pubDate>Tue, 02 Jan 2018 10:57:39 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/create-collection/</guid>
      <description>createCollection (definition, params)
 Method to create a collection.
Arguments Definition (required) Collection definition is a plain javascript object. In its simples form, it only need a name:
 name: a unique name to identify the collection. Required. fields: an array of column definitions. Optional.  Take a look at the example below:
{ name: &#39;users&#39;, fields: [ { id: &#39;_id&#39;, type: &#39;string&#39;, required: true }, { id: &#39;username&#39;, type: &#39;string&#39;, length: 20, required: true }, { id: &#39;fullname&#39;, type: &#39;string&#39;, required: true }, { id: &#39;admin&#39;, type: &#39;boolean&#39;, required: true, default: false }, { id: &#39;age&#39;, type: &#39;integer&#39; } ] }  Supported column types: string, integer, float, boolean, text, date, datetime.</description>
    </item>
    
    <item>
      <title>@rappopo/dab-ne</title>
      <link>https://docs.rappopo.com/dab/dab-ne/</link>
      <pubDate>Tue, 19 Dec 2017 09:33:32 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/dab-ne/</guid>
      <description>A DAB implementation for NeDB.
Installation Simply invoke this command in your project folder:
$ npm install --save @rappopo/dab-ne  And within your script:
const DabNe = require(&#39;@rappopo/dab-ne&#39;) const dab = new DabNe({ path: &#39;/path/to/nedb&#39;, dbName: &#39;mydb&#39; }) ... dab.findOne(&#39;my-doc&#39;).then(function(doc) { ... })  Options path: the path where all NeDB files will be saved and reside. If it not provided, it&amp;rsquo;ll defaults to /tmp
dbName: the database name. You&amp;rsquo;ll most likely want to give a custom name, otherwise it defaults to test</description>
    </item>
    
    <item>
      <title>afterBulkUpdate</title>
      <link>https://docs.rappopo.com/bdez/model/hook/after-bulk-update/</link>
      <pubDate>Mon, 08 Jan 2018 09:55:50 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/after-bulk-update/</guid>
      <description> afterBulkUpdate (body, bulkUpdateResult, params)
 </description>
    </item>
    
    <item>
      <title>findOne</title>
      <link>https://docs.rappopo.com/bdez/model/method/find-one/</link>
      <pubDate>Mon, 08 Jan 2018 09:52:34 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/find-one/</guid>
      <description> findOne (id, params)
 </description>
    </item>
    
    <item>
      <title>renameCollection</title>
      <link>https://docs.rappopo.com/dab/method/rename-collection/</link>
      <pubDate>Tue, 02 Jan 2018 10:57:52 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/rename-collection/</guid>
      <description>renameCollection (oldName, newName, params)
 Method to rename a collection.
Arguments Old Name (required) A string that indicate the existing collection name
New Name (required) A string for what the new collection will be named
Params (optional)  withSchema: optional, defaults to false. If set true, it&amp;rsquo;ll try to rename the internal database while keeping its existing schema and data intact. In SQL database, this means: rename table  Response Result It should return an object like below:</description>
    </item>
    
    <item>
      <title>@rappopo/dab-mongo</title>
      <link>https://docs.rappopo.com/dab/dab-mongo/</link>
      <pubDate>Tue, 19 Dec 2017 09:33:27 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/dab-mongo/</guid>
      <description>A DAB implementation for MongoDB.
Installation Simply invoke this command in your project folder:
$ npm install --save @rappopo/dab-mongo  And within your script:
const DabMongo = require(&#39;@rappopo/dab-mongo&#39;) const dab = new DabMongo({ url: &#39;mongodb://localhost:27017/mydb&#39;, collection: &#39;docs&#39; }) ... dab.findOne(&#39;my-doc&#39;).then(function(doc) { ... })  Options url: your MongoDB url endpoint. If it not provided, it defauts to: mongodb://localhost:27017/test
collection: the collection name. You&amp;rsquo;ll most likely want to give a custom name, otherwise it defaults to docs</description>
    </item>
    
    <item>
      <title>beforeBulkRemove</title>
      <link>https://docs.rappopo.com/bdez/model/hook/before-bulk-remove/</link>
      <pubDate>Mon, 08 Jan 2018 09:55:55 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/before-bulk-remove/</guid>
      <description> beforeBulkRemove (body, params)
 </description>
    </item>
    
    <item>
      <title>create</title>
      <link>https://docs.rappopo.com/bdez/model/method/create/</link>
      <pubDate>Mon, 08 Jan 2018 09:52:39 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/create/</guid>
      <description> create (body, params)
 </description>
    </item>
    
    <item>
      <title>removeCollection</title>
      <link>https://docs.rappopo.com/dab/method/remove-collection/</link>
      <pubDate>Tue, 02 Jan 2018 10:57:59 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/remove-collection/</guid>
      <description>removeCollection (name, params)
 Method to remove a collection.
Arguments Name (required) A string that indicate which collection to be removed
Params (optional)  withSchema: optional, defaults to false. If set true, it&amp;rsquo;ll destroy both the internal schema and data for good.  Response Result It should return an object like below:
{ success: true }  Error It&amp;rsquo;ll yield Collection not found if the named collection is nowhere to be found.</description>
    </item>
    
    <item>
      <title>@rappopo/dab-knex</title>
      <link>https://docs.rappopo.com/dab/dab-knex/</link>
      <pubDate>Tue, 19 Dec 2017 09:33:17 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/dab-knex/</guid>
      <description>A DAB implementation for Knex
Installation Simply invoke this command in your project folder:
$ npm install --save @rappopo/dab-knex  Don&amp;rsquo;t forget to also install the needed client library, e.g (if you choose to use sqlite3):
$ npm install sqlite3  And within your script:
const DabKnex = require(&#39;@rappopo/dab-knex&#39;) const dab = new DabKnex({ client: &#39;sqlite3&#39;, connection: { filename: &#39;/tmp/mydb.sqlite3&#39; } }) // prepare collections dab.createCollection({ name: &#39;test&#39; }) .</description>
    </item>
    
    <item>
      <title>afterBulkRemove</title>
      <link>https://docs.rappopo.com/bdez/model/hook/after-bulk-remove/</link>
      <pubDate>Mon, 08 Jan 2018 09:56:01 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/hook/after-bulk-remove/</guid>
      <description> afterBulkRemove (body, bulkRemoveResult, params)
 </description>
    </item>
    
    <item>
      <title>update</title>
      <link>https://docs.rappopo.com/bdez/model/method/update/</link>
      <pubDate>Mon, 08 Jan 2018 09:52:47 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/update/</guid>
      <description> update (id, body, params)
 </description>
    </item>
    
    <item>
      <title>@rappopo/dab-pouch</title>
      <link>https://docs.rappopo.com/dab/dab-pouch/</link>
      <pubDate>Tue, 19 Dec 2017 09:33:38 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/dab-pouch/</guid>
      <description>A DAB implementation for PouchDB.
Installation Simply invoke this command in your project folder:
$ npm install --save @rappopo/dab-pouch  And within your script:
const DabPouch = require(&#39;@rappopo/dab-pouch&#39;) const dab = new DabPouch({ path: &#39;/home/me/pouchdb&#39;, dbName: &#39;mydb&#39; }) ... dab.findOne(&#39;my-doc&#39;).then(function(doc) { ... })  Options path: the path where all PouchDB folder will be saved and reside. If it not provided, it&amp;rsquo;ll defaults to /tmp
dbName: the database name. You&amp;rsquo;ll most likely want to give a custom name, otherwise it defaults to test</description>
    </item>
    
    <item>
      <title>Alias</title>
      <link>https://docs.rappopo.com/dab/method/alias/</link>
      <pubDate>Mon, 18 Dec 2017 13:38:55 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/method/alias/</guid>
      <description>   Method Aliases     create add, insert   update edit   remove delete, destroy   bulkCreate bulkAdd, bulkInsert   bulkUpdate bulkEdit   bulkRemove bulkDelete , bulkDestroy   createCollection addCollection   removeCollection deleteCollection, destroyCollection    </description>
    </item>
    
    <item>
      <title>remove</title>
      <link>https://docs.rappopo.com/bdez/model/method/remove/</link>
      <pubDate>Mon, 08 Jan 2018 09:52:57 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/remove/</guid>
      <description> remove (id, params)
 </description>
    </item>
    
    <item>
      <title>@rappopo/dab-couch</title>
      <link>https://docs.rappopo.com/dab/dab-couch/</link>
      <pubDate>Tue, 19 Dec 2017 09:24:46 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/dab-couch/</guid>
      <description>A DAB implementation for CouchDB 2.0 and above.
Installation Simply invoke this command in your project folder:
$ npm install --save @rappopo/dab-couch  And within your script:
const DabCouch = require(&#39;@rappopo/dab-couch&#39;) const dab = new DabCouch({ url: &#39;http://localhost:5984&#39;, dbName: &#39;mydb&#39; }) ... dab.findOne(&#39;my-doc&#39;).then(function(doc) { ... })  Options url: your CouchDB url endpoint. If it not provided, it defauts to: http://localhost:5984
dbName: the database name to connect to. Defaults to test</description>
    </item>
    
    <item>
      <title>bulkCreate</title>
      <link>https://docs.rappopo.com/bdez/model/method/bulk-create/</link>
      <pubDate>Mon, 08 Jan 2018 09:53:07 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/bulk-create/</guid>
      <description> bulkCreate (body, params)
 </description>
    </item>
    
    <item>
      <title>@rappopo/dab-es</title>
      <link>https://docs.rappopo.com/dab/dab-es/</link>
      <pubDate>Tue, 19 Dec 2017 09:33:12 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/dab-es/</guid>
      <description>A DAB implementation for Elasticsearch. The excellent library e3po is used to transform Mongo Query Language to Elasticsearch DSB.
Installation Simply invoke this command in your project folder:
$ npm install --save @rappopo/dab-es  And within your script:
const DabEs = require(&#39;@rappopo/dab-es&#39;) const dab = new DabEs({ hosts: [&#39;localhost:9200&#39;], index: &#39;myindex&#39;, type: &#39;mytype&#39; }) ... dab.findOne(&#39;my-doc&#39;).then(function(doc) { ... })  Options hosts: your Elasticsearch hosts array. If it not provided, it defauts to: [&amp;lsquo;localhost:9200&amp;rsquo;]</description>
    </item>
    
    <item>
      <title>bulkUpdate</title>
      <link>https://docs.rappopo.com/bdez/model/method/bulk-update/</link>
      <pubDate>Mon, 08 Jan 2018 09:53:11 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/bulk-update/</guid>
      <description> bulkUpdate (body, params)
 </description>
    </item>
    
    <item>
      <title>@rappopo/dab-couch-es</title>
      <link>https://docs.rappopo.com/dab/dab-couch-es/</link>
      <pubDate>Tue, 19 Dec 2017 10:21:48 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/dab-couch-es/</guid>
      <description>A DAB implementation for CouchDB 2.0 AND Elasticsearch for finding documents.
You might ask yourself, why this useless package if there are already @rappopo/dab-couch and @rappopo/dab-es? Well, this package is a thin wrapper around those two. Only the find method is taken from @rappopo/dab-es, while the rest are from @rappopo/dab-couch.
I make this stupid package because I work alot with both CouchDB and Elasticsearch. Both systems are connected to each other through @rappopo/nesu in the back, which basically listen to CouchDB changes stream and forward it to Elasticsearch for indexing.</description>
    </item>
    
    <item>
      <title>bulkRemove</title>
      <link>https://docs.rappopo.com/bdez/model/method/bulk-remove/</link>
      <pubDate>Mon, 08 Jan 2018 09:53:16 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/bulk-remove/</guid>
      <description> bulkRemove (body, params)
 </description>
    </item>
    
    <item>
      <title>@rappopo/dab-redis</title>
      <link>https://docs.rappopo.com/dab/dab-redis/</link>
      <pubDate>Tue, 19 Dec 2017 09:33:43 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/dab/dab-redis/</guid>
      <description>A DAB implementation for Redis.
Installation Simply invoke this command in your project folder:
$ npm install --save @rappopo/dab-redis  And within your script:
const DabRedis = require(&#39;@rappopo/dab-redis&#39;) const dab = new DabRedis({ url: &#39;redis://myhost:6379&#39;, ns: &#39;docs&#39; }) ... dab.findOne(&#39;my-doc&#39;).then(function(doc) { ... })  Options url: your Redis url endpoint. If it not provided, it defauts to: redis://localhost:6379
ns: your namespace. You&amp;rsquo;ll most likely want to give a custom name, otherwise it defaults to doc</description>
    </item>
    
    <item>
      <title>copyFrom</title>
      <link>https://docs.rappopo.com/bdez/model/method/copy-from/</link>
      <pubDate>Mon, 08 Jan 2018 09:53:27 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/copy-from/</guid>
      <description> copyFrom (source, params)
 </description>
    </item>
    
    <item>
      <title>copyTo</title>
      <link>https://docs.rappopo.com/bdez/model/method/copy-to/</link>
      <pubDate>Mon, 08 Jan 2018 09:53:31 +0700</pubDate>
      
      <guid>https://docs.rappopo.com/bdez/model/method/copy-to/</guid>
      <description> copyTo (dest, params)
 </description>
    </item>
    
  </channel>
</rss>